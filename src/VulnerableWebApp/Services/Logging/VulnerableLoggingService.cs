using Npgsql;
using VulnerableWebApp.Models;
using VulnerableWebApp.Models.Data;

namespace VulnerableWebApp.Services.Logging;

/// <summary>
/// ‚ö†Ô∏è IMPLEMENTA√á√ÉO VULNER√ÅVEL - APENAS PARA FINS EDUCACIONAIS
/// Esta implementa√ß√£o demonstra FALHAS GRAVES em logging de seguran√ßa.
/// N√ÉO USE EM PRODU√á√ÉO!
/// </summary>
public class VulnerableLoggingService : ISecurityLoggingService
{
    private readonly DatabaseConfig _config;
    private readonly ILogger<VulnerableLoggingService> _logger;

    public VulnerableLoggingService(DatabaseConfig config, ILogger<VulnerableLoggingService> logger)
    {
        _config = config;
        _logger = logger;
    }

    private string GetConnectionString()
    {
        return $"Host={_config.Host};Port={_config.Port};Database={_config.Database};Username={_config.Username};Password={_config.Password}";
    }

    public LoggingResult SimulateLoginAttempt(string username, string password, string ipAddress, bool success)
    {
        // ‚ö†Ô∏è VULNERABILIDADE 1: Log gen√©rico e vago
        // ‚ö†Ô∏è VULNERABILIDADE 2: N√£o registra IP, timestamp preciso, ou detalhes
        // ‚ö†Ô∏è VULNERABILIDADE 3: Log s√≥ de sucessos, ignora falhas

        if (success)
        {
            _logger.LogInformation("User logged in");
            // N√£o salva no banco - apenas console log!
        }
        // ‚ö†Ô∏è Falhas de login N√ÉO s√£o registradas!

        var result = new LoggingResult
        {
            Success = true,
            Message = success ? "Login realizado" : "Login falhou",
            VulnerableLog = success ? "INFO: User logged in" : "(Sem log)",
            MissingInformation = new List<string>
            {
                "‚ùå Username n√£o registrado",
                "‚ùå IP address n√£o registrado",
                "‚ùå Timestamp preciso n√£o registrado",
                success ? "" : "‚ùå Falhas de login N√ÉO s√£o registradas!",
                "‚ùå N√£o persistido no banco de dados"
            },
            SecurityConcerns = new List<string>
            {
                "üö® Imposs√≠vel detectar ataques de for√ßa bruta",
                "üö® N√£o h√° auditoria de acessos",
                "üö® Imposs√≠vel investigar incidentes"
            }
        };

        return result;
    }

    public LoggingResult SimulateDataAccess(string username, string resource, string ipAddress)
    {
        // ‚ö†Ô∏è VULNERABILIDADE: Nenhum log de acesso a dados sens√≠veis

        _logger.LogDebug("Data accessed"); // Debug level - geralmente desabilitado em produ√ß√£o!

        return new LoggingResult
        {
            Success = true,
            Message = "Dados acessados",
            VulnerableLog = "DEBUG: Data accessed",
            MissingInformation = new List<string>
            {
                "‚ùå Quem acessou? (usu√°rio n√£o registrado)",
                "‚ùå O que foi acessado? (recurso n√£o registrado)",
                "‚ùå Quando? (timestamp n√£o registrado)",
                "‚ùå De onde? (IP n√£o registrado)",
                "‚ùå Log em n√≠vel DEBUG (desabilitado em produ√ß√£o)"
            },
            SecurityConcerns = new List<string>
            {
                "üö® Exfiltra√ß√£o de dados n√£o detect√°vel",
                "üö® Acesso n√£o autorizado passa despercebido",
                "üö® Sem trilha de auditoria"
            }
        };
    }

    public LoggingResult SimulateUnauthorizedAccess(string username, string resource, string ipAddress)
    {
        // ‚ö†Ô∏è VULNERABILIDADE CR√çTICA: Tentativas de acesso n√£o autorizado N√ÉO s√£o registradas!

        // Sil√™ncio total - nenhum log!

        return new LoggingResult
        {
            Success = false,
            Message = "Acesso n√£o autorizado tentado",
            VulnerableLog = "(SEM LOG - Sil√™ncio total!)",
            MissingInformation = new List<string>
            {
                "‚ùå NENHUM registro da tentativa!",
                "‚ùå Atacante pode tentar infinitamente sem detec√ß√£o",
                "‚ùå Zero visibilidade para equipe de seguran√ßa"
            },
            SecurityConcerns = new List<string>
            {
                "üö® CR√çTICO: Ataques n√£o s√£o detectados",
                "üö® CR√çTICO: Sem alertas de seguran√ßa",
                "üö® CR√çTICO: Compliance n√£o atendido"
            }
        };
    }

    public LoggingResult SimulateDataModification(string username, string resource, string oldValue, string newValue, string ipAddress)
    {
        // ‚ö†Ô∏è VULNERABILIDADE: Log muito vago, sem detalhes

        _logger.LogInformation("Data changed");

        return new LoggingResult
        {
            Success = true,
            Message = "Dados modificados",
            VulnerableLog = "INFO: Data changed",
            MissingInformation = new List<string>
            {
                "‚ùå Quem modificou?",
                "‚ùå O que foi modificado?",
                "‚ùå Valor anterior n√£o registrado",
                "‚ùå Valor novo n√£o registrado",
                "‚ùå Sem contexto para auditoria"
            },
            SecurityConcerns = new List<string>
            {
                "üö® Imposs√≠vel reverter mudan√ßas maliciosas",
                "üö® Sem trilha de auditoria adequada",
                "üö® Compliance n√£o atendido (GDPR, LGPD)"
            }
        };
    }

    public LoggingResult SimulateSuspiciousActivity(string username, string activity, string ipAddress)
    {
        // ‚ö†Ô∏è VULNERABILIDADE: Atividade suspeita n√£o gera alerta

        _logger.LogWarning("Something happened");

        return new LoggingResult
        {
            Success = true,
            Message = "Atividade suspeita detectada",
            VulnerableLog = "WARN: Something happened",
            MissingInformation = new List<string>
            {
                "‚ùå Mensagem gen√©rica e in√∫til",
                "‚ùå Sem detalhes da atividade suspeita",
                "‚ùå Sem contexto do usu√°rio ou IP",
                "‚ùå N√£o gera alerta para equipe de seguran√ßa"
            },
            SecurityConcerns = new List<string>
            {
                "üö® Ataques em andamento n√£o s√£o detectados",
                "üö® Sem resposta a incidentes",
                "üö® Tempo de detec√ß√£o: INFINITO"
            }
        };
    }

    public List<AuditLog> GetRecentLogs(int count = 50)
    {
        var logs = new List<AuditLog>();

        using var conn = new NpgsqlConnection(GetConnectionString());
        conn.Open();

        using var cmd = new NpgsqlCommand();
        cmd.Connection = conn;
        cmd.CommandText = @"SELECT ""Id"", ""Timestamp"", ""Level"", ""EventType"", ""Username"",
                                  ""IpAddress"", ""Action"", ""Resource"", ""Success"", ""Message"", ""Details""
                           FROM ""AuditLog""
                           ORDER BY ""Timestamp"" DESC
                           LIMIT @count";
        cmd.Parameters.AddWithValue("@count", count);

        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            logs.Add(new AuditLog
            {
                Id = reader.GetString(0),
                Timestamp = reader.GetDateTime(1),
                Level = reader.GetString(2),
                EventType = reader.GetString(3),
                Username = reader.IsDBNull(4) ? "" : reader.GetString(4),
                IpAddress = reader.IsDBNull(5) ? "" : reader.GetString(5),
                Action = reader.IsDBNull(6) ? "" : reader.GetString(6),
                Resource = reader.IsDBNull(7) ? "" : reader.GetString(7),
                Success = reader.GetBoolean(8),
                Message = reader.IsDBNull(9) ? "" : reader.GetString(9),
                Details = reader.IsDBNull(10) ? "" : reader.GetString(10)
            });
        }

        return logs;
    }

    public void ClearLogs()
    {
        using var conn = new NpgsqlConnection(GetConnectionString());
        conn.Open();

        using var cmd = new NpgsqlCommand();
        cmd.Connection = conn;
        cmd.CommandText = @"DELETE FROM ""AuditLog""";
        cmd.ExecuteNonQuery();
    }
}
